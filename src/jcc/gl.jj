options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}
PARSER_BEGIN(gl)
package jcc;
import java.io.*;
import pkg.*;
public class gl {
   static Tabela tabela = new Tabela();
   public static void main(String args[])  throws ParseException  {
      gl analisador = null;
      try {
         analisador = new gl(new FileInputStream("prog_fonte.my"));
         analisador.inicio();
         System.out.println(tabela.toString());
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}
PARSER_END(gl)
SKIP : { " " | "\t" | "\r" | "\n" }
TOKEN [IGNORE_CASE] : {
      <EXIBE: "exibe" >
}
TOKEN : {
      < IDENT:   (["a"-"z"])+ > |
      < ATRIB:   ":=" >         |
      < ADICAO:  "+" >          |
      < PT_VIRG: ";" >          |
      < UM:      "I" >          |
      < DOIS:    "II" >         |
      < TRES:    "III" >        |
      < QUATRO:  "IV" >         |
      < CINCO:   "V" >          |
      < SEIS:    "VI" >         |
      < SETE:    "VII" >        |
      < OITO:    "VIII" >       |
      < NOVE:    "IX" >         |
      < DEZ:     "X" >          |
      < VINTE:   "XX" >         |
      < TRINTA:  "XXX" >      
}
void inicio() : {}
{
   ( linhaComando() )* <EOF>
}
void linhaComando() : {} 
{
      comando() <PT_VIRG>
}
void comando() : {} 
{
      exibe() | atribui()
}
void exibe() : {}
{
      <EXIBE> <IDENT>
}
void atribui() : {Simbolo simb; Token t;} 
{
      t=<IDENT>
      {
            simb = new Simbolo(t.image);
            tabela.inclui(simb);
      }
      <ATRIB> expressao()
}
void expressao() : {} 
{
      fator() ( <ADICAO> fator() )*
}
void fator() : {} 
{
      <IDENT> | numero()
}
void numero() : {} 
{
      dezena() ( unidade() )? | unidade()
}
void unidade() : {} 
{
      <UM> | <DOIS> | <TRES> | <QUATRO> | <CINCO> | <SEIS> | <SETE> | <OITO> | <NOVE>
}
void dezena() : {} 
{
      <DEZ> | <VINTE> | <TRINTA>
}