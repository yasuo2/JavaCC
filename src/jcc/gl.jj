options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}
PARSER_BEGIN(gl)
package jcc;
import java.io.*;
import pkg.*;
import java.util.LinkedList;
public class gl {
   static Tabela tabela = new Tabela();
   static LinkedList<Comando> listaComandos;
   public static void main(String args[])  throws ParseException  {
      gl analisador = null;
      try {
         analisador = new gl(new FileInputStream("prog_fonte.my"));
         listaComandos = analisador.inicio();
         // System.out.println(tabela.toString());
         System.out.println(listaComandos);
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}
PARSER_END(gl)
SKIP : { " " | "\t" | "\r" | "\n" }
TOKEN [IGNORE_CASE] : {
      <EXIBE: "exibe" >
}
TOKEN : {
      < IDENT:   (["a"-"z"])+ > |
      < ATRIB:   ":=" >         |
      < ADICAO:  "+" >          |
      < PT_VIRG: ";" >          |
      < UM:      "I" >          |
      < DOIS:    "II" >         |
      < TRES:    "III" >        |
      < QUATRO:  "IV" >         |
      < CINCO:   "V" >          |
      < SEIS:    "VI" >         |
      < SETE:    "VII" >        |
      < OITO:    "VIII" >       |
      < NOVE:    "IX" >         |
      < DEZ:     "X" >          |
      < VINTE:   "XX" >         |
      < TRINTA:  "XXX" >      
}
LinkedList<Comando> inicio() : {Comando com = null; LinkedList<Comando> listaComandos = new LinkedList();}
{
   ( com = linhaComando()
      {
           listaComandos.add(com);
      }
   )* <EOF>
   {
      return listaComandos;
   }
}
Comando linhaComando() : {Comando com;} 
{
      com = comando() <PT_VIRG>
      {
            return com;
      }
}
Comando comando() : {Comando com;} 
{
      (
          com = exibe()
       |
          com = atribui()
      )
      {
            return com;
      }
}
Comando exibe() : {Comando com; Token t;}
{
      <EXIBE> t = <IDENT>
      {
            com = new Comando('E',t.image,"");
            return com;
      }
}
Comando atribui() : {Simbolo simb; Token t; LinkedList<Item> listaExp; Comando com;} 
{
      t=<IDENT>
      {
            simb = new Simbolo(t.image);
            tabela.inclui(simb);
      }
      <ATRIB> listaExp = expressao()
      {
            //System.out.println(listaExp);
            com = new Comando('A',t.image,listaExp);
            return com;
      }
}
LinkedList<Item> expressao() : {LinkedList<Item> listaExp = new LinkedList<Item>(); Item item = null;} 
{
      item = fator()
      {
            listaExp.add(item);
      }
      ( 
         <ADICAO> item = fator()
         {
              listaExp.add(item);
              listaExp.add(new Item('o',"+"));
         }
     
      )*
      {
            return listaExp;
      }
}
Item fator() : {Token t;Item item = null; int valorNumero;} 
{
      t = <IDENT>
      {
         if(!tabela.isExiste(t.image))
          System.out.println("Erro semântico \n A variável "+t.image+
                             " não foi inicializada");
         item = new Item('v',t.image);
         return item;
      }
  |
      valorNumero = numero()
      {
         item = new Item('n',""+valorNumero);
         return item;
      }
}
int numero() : {int valorUnidade = 0, valorDezena = 0;} 
{
      (
         valorDezena = dezena() ( valorUnidade = unidade() )? | valorUnidade = unidade()
      )
      {
            return valorDezena + valorUnidade;
      }
}
int unidade() : {} 
{
      <UM>     { return 1; } |
      <DOIS>   { return 2; } |
      <TRES>   { return 3; } |
      <QUATRO> { return 4; } |
      <CINCO>  { return 5; } |
      <SEIS>   { return 6; } |
      <SETE>   { return 7; } |
      <OITO>   { return 8; } |
      <NOVE>   { return 9; }
}
int dezena() : {} 
{
      <DEZ>    { return 10; } |
      <VINTE>  { return 20; } |
      <TRINTA> { return 30; }
}